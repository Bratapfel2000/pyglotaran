# As config was originally based on an example by Olivier Grisel. Thanks!
# https://github.com/pyinstaller/pyinstaller/blob/develop/appveyor.yml

clone_depth: 50



    PYTEST: py.test -n3 --maxfail 5 --durations=10 --junitxml=junit-results.xml
  # uncomment to disable cache restore
#  APPVEYOR_CACHE_SKIP_RESTORE: true
    APPVEYOR_SAVE_CACHE_ON_ERROR: flase

  matrix:
    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64

    - PYTHON: C:\Python37-x64
      PYTHON_VERSION: 3.7
      PYTHON_ARCH: 64

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

cache:
  # Cache downloaded pip packages and built wheels.
  - '%LOCALAPPDATA%\pip\Cache\http'
  - '%LOCALAPPDATA%\pip\Cache\wheels'

install:
  # set python path
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

before_test:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - python --version
  # Show size of cache
  - if exist "%LOCALAPPDATA%\pip\Cache" C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"
  - if exist "C:\projects\glotaran\.tox" C:\cygwin\bin\du -hs "C:\projects\glotaran\.tox"

  # install all requirements
  # calling pip with "python -m" prevents an access denied error
  - python -m pip install -U -r requirements_dev.txt
  # install glotaran
  - pip install -e .


build: none

test_script:
  # making sure old .coverage file gets deleted
  - coverage erase
  # run tests
  - py.test --cov=glotaran --cov-config .coveragerc glotaran


on_finish:
  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - if exist "%LOCALAPPDATA%\pip" C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - if exist "%LOCALAPPDATA%\pip" C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - if exist "%LOCALAPPDATA%\pip" C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete
  # Show size of cache
  - if exist "%LOCALAPPDATA%\pip\Cache" C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"
